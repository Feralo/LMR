import matplotlib
# need to do this when running remotely, and to suppress figures
matplotlib.use('Agg')
import matplotlib.pyplot as plt

# make simple plots (some bits have to be hard wired, so use with care)
#iplot = True
iplot = False

#
# process verification statistics generated by LMR_verify_GM.py and LMR_verify_grid.py
#

#import numpy as np
import cPickle

# list with pickle files containing results; these are experiment names
#expts = ['production_mlost_ccsm4_pagesall_0.75_101',
#         'production_mlost_ccsm4_pagesall_0.75_1',
#         'production_gis_ccsm4_pagesall_0.75_101',
#         'production_gis_ccsm4_pagesall_0.75_1',
#         'production_cru_ccsm4_pagesall_0.75_101',
#         'production_cru_ccsm4_pagesall_0.75_1',
#         'production_mlost_era20c_pagesall_0.75_101',
#         'production_mlost_era20c_pagesall_0.75_1',
#         'test_V2proto_TorP_1']
expts = [
    'pages2_loc1000_11',
    'pages2_loc5000_11',
    'pages2_loc10000_11',
    'pages2_loc12000_11',
    'pages2_loc15000_11',
    'pages2_loc20000_11',
    'pages2_noloc_11',
    'pages2_loc12000_breit_11',
    'pages2_loc12000_pages2k2_seasonal_TorP_11'
    ]
         
# use a metadata keyword to filter results for quick assessment
#keyword = 'GIS'
#keyword = 'MLOST'
#keyword = 'correlation'
#keyword = 'efficiency'
#keyword = 'LMR_GIS coefficient of efficiency'

def print_verification_stats(expts, keyword):
    dsave = []
    for ex in expts:
        exfile = ex+'_iters_gmt_verification.pckl'
        print '---------------------------------------------------------------------'
        print 'working on file: ',exfile
        infile = open(exfile,'r')
        ddict = cPickle.load(infile)

        # NOTE: This line obliterates any variables in global scope with same name as ddict key
        # load keys into variables by the key name
        # globals().update(ddict)
        stat_metadata = ddict['stat_metadata']
        
        # list out keys conditionally
        for key in ddict.keys():
            #print key,ddict[key],stat_metadata[key]
            if keyword in stat_metadata[key]:
                print key,ddict[key],stat_metadata[key]
                # save data
                dsave.append(ddict[key])

    return dsave

# use a keyword to filter results
keyword1 = 'consensus coefficient of efficiency'
print '\nresults for all experiments for metric: ' + keyword1
dsave1 = print_verification_stats(expts, keyword1)
print dsave1

keyword2 = 'GIS detrended coefficient of efficiency'
print '\nresults for all experiments for metric: ' + keyword2
dsave2 = print_verification_stats(expts, keyword2)
print dsave2

keyword3 = 'consensus correlation'
print '\nresults for all experiments for metric: ' + keyword3
dsave3 = print_verification_stats(expts, keyword3)
print dsave3

# make a simple plot
xlabel = 'localization distance (km)'
#pvar = dsave1; keyw = keyword1
pvar = dsave2; keyw = keyword2
#pvar = dsave3; keyw = keyword3
if iplot:
    xvals=['1000','5000','10000','12000','15000','20000','40000']
    xlabs=['1000','5000','10000','12000','15000','20000','no loc']
    plt.plot(xvals,pvar,'ko')
    plt.plot(xvals,pvar,'k-')
    plt.xlabel(xlabel)
    plt.ylabel(keyw)
    plt.title('GMT verification ' + keyw)
    figname = keyw+'_GMT.png'
    print('saving to '+ figname)
    plt.savefig(figname)

